/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CategorieEntity } from './CategorieEntity';
import {
    CategorieEntityFromJSON,
    CategorieEntityFromJSONTyped,
    CategorieEntityToJSON,
} from './CategorieEntity';
import type { NodeEntity } from './NodeEntity';
import {
    NodeEntityFromJSON,
    NodeEntityFromJSONTyped,
    NodeEntityToJSON,
} from './NodeEntity';

/**
 * 
 * @export
 * @interface DiskEntity
 */
export interface DiskEntity {
    /**
     * 
     * @type {string}
     * @memberof DiskEntity
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof DiskEntity
     */
    dateCreated: Date;
    /**
     * 
     * @type {Date}
     * @memberof DiskEntity
     */
    dateUpdated: Date;
    /**
     * 
     * @type {NodeEntity}
     * @memberof DiskEntity
     */
    nodeEntity: NodeEntity;
    /**
     * 
     * @type {CategorieEntity}
     * @memberof DiskEntity
     */
    categorieEntity: CategorieEntity;
    /**
     * 
     * @type {string}
     * @memberof DiskEntity
     */
    path: string;
    /**
     * 
     * @type {string}
     * @memberof DiskEntity
     */
    diskType: DiskEntityDiskTypeEnum;
}


/**
 * @export
 */
export const DiskEntityDiskTypeEnum = {
    Library: 'LIBRARY',
    Cache: 'CACHE'
} as const;
export type DiskEntityDiskTypeEnum = typeof DiskEntityDiskTypeEnum[keyof typeof DiskEntityDiskTypeEnum];


/**
 * Check if a given object implements the DiskEntity interface.
 */
export function instanceOfDiskEntity(value: object): boolean {
    if (!('dateCreated' in value)) return false;
    if (!('dateUpdated' in value)) return false;
    if (!('nodeEntity' in value)) return false;
    if (!('categorieEntity' in value)) return false;
    if (!('path' in value)) return false;
    if (!('diskType' in value)) return false;
    return true;
}

export function DiskEntityFromJSON(json: any): DiskEntity {
    return DiskEntityFromJSONTyped(json, false);
}

export function DiskEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): DiskEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'dateCreated': (new Date(json['dateCreated'])),
        'dateUpdated': (new Date(json['dateUpdated'])),
        'nodeEntity': NodeEntityFromJSON(json['nodeEntity']),
        'categorieEntity': CategorieEntityFromJSON(json['categorieEntity']),
        'path': json['path'],
        'diskType': json['diskType'],
    };
}

export function DiskEntityToJSON(value?: DiskEntity | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'dateCreated': ((value['dateCreated']).toISOString()),
        'dateUpdated': ((value['dateUpdated']).toISOString()),
        'nodeEntity': NodeEntityToJSON(value['nodeEntity']),
        'categorieEntity': CategorieEntityToJSON(value['categorieEntity']),
        'path': value['path'],
        'diskType': value['diskType'],
    };
}

