/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Disk } from './Disk';
import {
    DiskFromJSON,
    DiskFromJSONTyped,
    DiskToJSON,
} from './Disk';
import type { Episode } from './Episode';
import {
    EpisodeFromJSON,
    EpisodeFromJSONTyped,
    EpisodeToJSON,
} from './Episode';
import type { MediaFileStream } from './MediaFileStream';
import {
    MediaFileStreamFromJSON,
    MediaFileStreamFromJSONTyped,
    MediaFileStreamToJSON,
} from './MediaFileStream';

/**
 * 
 * @export
 * @interface MediaFile
 */
export interface MediaFile {
    /**
     * 
     * @type {string}
     * @memberof MediaFile
     */
    id?: string;
    /**
     * 
     * @type {Disk}
     * @memberof MediaFile
     */
    disk?: Disk;
    /**
     * 
     * @type {Episode}
     * @memberof MediaFile
     */
    episode?: Episode;
    /**
     * 
     * @type {Array<MediaFileStream>}
     * @memberof MediaFile
     */
    mediaFileStream?: Array<MediaFileStream>;
    /**
     * 
     * @type {string}
     * @memberof MediaFile
     */
    path?: string;
    /**
     * 
     * @type {number}
     * @memberof MediaFile
     */
    size?: number;
}

/**
 * Check if a given object implements the MediaFile interface.
 */
export function instanceOfMediaFile(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MediaFileFromJSON(json: any): MediaFile {
    return MediaFileFromJSONTyped(json, false);
}

export function MediaFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaFile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'disk': !exists(json, 'disk') ? undefined : DiskFromJSON(json['disk']),
        'episode': !exists(json, 'episode') ? undefined : EpisodeFromJSON(json['episode']),
        'mediaFileStream': !exists(json, 'mediaFileStream') ? undefined : ((json['mediaFileStream'] as Array<any>).map(MediaFileStreamFromJSON)),
        'path': !exists(json, 'path') ? undefined : json['path'],
        'size': !exists(json, 'size') ? undefined : json['size'],
    };
}

export function MediaFileToJSON(value?: MediaFile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'disk': DiskToJSON(value.disk),
        'episode': EpisodeToJSON(value.episode),
        'mediaFileStream': value.mediaFileStream === undefined ? undefined : ((value.mediaFileStream as Array<any>).map(MediaFileStreamToJSON)),
        'path': value.path,
        'size': value.size,
    };
}

