/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MediaFile } from './MediaFile';
import {
    MediaFileFromJSON,
    MediaFileFromJSONTyped,
    MediaFileToJSON,
} from './MediaFile';
import type { Season } from './Season';
import {
    SeasonFromJSON,
    SeasonFromJSONTyped,
    SeasonToJSON,
} from './Season';
import type { TVShow } from './TVShow';
import {
    TVShowFromJSON,
    TVShowFromJSONTyped,
    TVShowToJSON,
} from './TVShow';

/**
 * 
 * @export
 * @interface Episode
 */
export interface Episode {
    /**
     * 
     * @type {string}
     * @memberof Episode
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Episode
     */
    dateCreated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Episode
     */
    dateUpdated?: Date;
    /**
     * 
     * @type {Season}
     * @memberof Episode
     */
    season?: Season;
    /**
     * 
     * @type {Array<MediaFile>}
     * @memberof Episode
     */
    mediaFiles?: Array<MediaFile>;
    /**
     * 
     * @type {number}
     * @memberof Episode
     */
    number?: number;
    /**
     * 
     * @type {TVShow}
     * @memberof Episode
     */
    tvshow?: TVShow;
}

/**
 * Check if a given object implements the Episode interface.
 */
export function instanceOfEpisode(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EpisodeFromJSON(json: any): Episode {
    return EpisodeFromJSONTyped(json, false);
}

export function EpisodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Episode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'dateCreated': !exists(json, 'dateCreated') ? undefined : (new Date(json['dateCreated'])),
        'dateUpdated': !exists(json, 'dateUpdated') ? undefined : (new Date(json['dateUpdated'])),
        'season': !exists(json, 'season') ? undefined : SeasonFromJSON(json['season']),
        'mediaFiles': !exists(json, 'mediaFiles') ? undefined : ((json['mediaFiles'] as Array<any>).map(MediaFileFromJSON)),
        'number': !exists(json, 'number') ? undefined : json['number'],
        'tvshow': !exists(json, 'tvshow') ? undefined : TVShowFromJSON(json['tvshow']),
    };
}

export function EpisodeToJSON(value?: Episode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'dateCreated': value.dateCreated === undefined ? undefined : (value.dateCreated.toISOString()),
        'dateUpdated': value.dateUpdated === undefined ? undefined : (value.dateUpdated.toISOString()),
        'season': SeasonToJSON(value.season),
        'mediaFiles': value.mediaFiles === undefined ? undefined : ((value.mediaFiles as Array<any>).map(MediaFileToJSON)),
        'number': value.number,
        'tvshow': TVShowToJSON(value.tvshow),
    };
}

