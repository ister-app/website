/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PageableObject } from './PageableObject';
import {
    PageableObjectFromJSON,
    PageableObjectFromJSONTyped,
    PageableObjectToJSON,
} from './PageableObject';
import type { SortObject } from './SortObject';
import {
    SortObjectFromJSON,
    SortObjectFromJSONTyped,
    SortObjectToJSON,
} from './SortObject';
import type { TVShow } from './TVShow';
import {
    TVShowFromJSON,
    TVShowFromJSONTyped,
    TVShowToJSON,
} from './TVShow';

/**
 * 
 * @export
 * @interface PageTVShow
 */
export interface PageTVShow {
    /**
     * 
     * @type {number}
     * @memberof PageTVShow
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageTVShow
     */
    totalElements?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageTVShow
     */
    pageable?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageTVShow
     */
    size?: number;
    /**
     * 
     * @type {Array<TVShow>}
     * @memberof PageTVShow
     */
    content?: Array<TVShow>;
    /**
     * 
     * @type {number}
     * @memberof PageTVShow
     */
    number?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageTVShow
     */
    sort?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageTVShow
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageTVShow
     */
    last?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageTVShow
     */
    numberOfElements?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageTVShow
     */
    empty?: boolean;
}

/**
 * Check if a given object implements the PageTVShow interface.
 */
export function instanceOfPageTVShow(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PageTVShowFromJSON(json: any): PageTVShow {
    return PageTVShowFromJSONTyped(json, false);
}

export function PageTVShowFromJSONTyped(json: any, ignoreDiscriminator: boolean): PageTVShow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'totalElements': !exists(json, 'totalElements') ? undefined : json['totalElements'],
        'pageable': !exists(json, 'pageable') ? undefined : PageableObjectFromJSON(json['pageable']),
        'size': !exists(json, 'size') ? undefined : json['size'],
        'content': !exists(json, 'content') ? undefined : ((json['content'] as Array<any>).map(TVShowFromJSON)),
        'number': !exists(json, 'number') ? undefined : json['number'],
        'sort': !exists(json, 'sort') ? undefined : SortObjectFromJSON(json['sort']),
        'first': !exists(json, 'first') ? undefined : json['first'],
        'last': !exists(json, 'last') ? undefined : json['last'],
        'numberOfElements': !exists(json, 'numberOfElements') ? undefined : json['numberOfElements'],
        'empty': !exists(json, 'empty') ? undefined : json['empty'],
    };
}

export function PageTVShowToJSON(value?: PageTVShow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'totalPages': value.totalPages,
        'totalElements': value.totalElements,
        'pageable': PageableObjectToJSON(value.pageable),
        'size': value.size,
        'content': value.content === undefined ? undefined : ((value.content as Array<any>).map(TVShowToJSON)),
        'number': value.number,
        'sort': SortObjectToJSON(value.sort),
        'first': value.first,
        'last': value.last,
        'numberOfElements': value.numberOfElements,
        'empty': value.empty,
    };
}

