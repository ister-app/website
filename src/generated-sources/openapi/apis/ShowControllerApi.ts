/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageShowEntity,
  SeasonEntity,
  ShowEntity,
} from '../models/index';
import {
    PageShowEntityFromJSON,
    PageShowEntityToJSON,
    SeasonEntityFromJSON,
    SeasonEntityToJSON,
    ShowEntityFromJSON,
    ShowEntityToJSON,
} from '../models/index';

export interface GetSeasonsRequest {
    id: string;
}

export interface GetTVShowRequest {
    id: string;
}

/**
 * 
 */
export class ShowControllerApi extends runtime.BaseAPI {

    /**
     */
    async getRecentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageShowEntity>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shows/recent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageShowEntityFromJSON(jsonValue));
    }

    /**
     */
    async getRecent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageShowEntity> {
        const response = await this.getRecentRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getSeasonsRaw(requestParameters: GetSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SeasonEntity>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSeasons().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shows/{id}/seasons`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SeasonEntityFromJSON));
    }

    /**
     */
    async getSeasons(requestParameters: GetSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SeasonEntity>> {
        const response = await this.getSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTVShowRaw(requestParameters: GetTVShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTVShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowEntityFromJSON(jsonValue));
    }

    /**
     */
    async getTVShow(requestParameters: GetTVShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowEntity> {
        const response = await this.getTVShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
